import numpy as np
from scipy import linalg

def eigen_adjust_covariance(sample_cov, method=linear_shrinkage, alpha=0.5, min_eigenval=1e-6)
    
    Adjust a sample covariance matrix using eigenfactor adjustment methods.
    
    Parameters
    -----------
    sample_cov  ndarray
        Sample covariance matrix
    method  str
        Adjustment method linear_shrinkage, clipping, nonlinear_shrinkage
    alpha  float
        Shrinkage intensity parameter (for linear_shrinkage)
    min_eigenval  float
        Minimum eigenvalue threshold (for clipping)
        
    Returns
    --------
    ndarray
        Adjusted covariance matrix
    
    # Ensure the matrix is symmetric (handle numerical issues)
    sample_cov = (sample_cov + sample_cov.T)  2
    
    # Perform eigendecomposition
    eigenvals, eigenvecs = linalg.eigh(sample_cov)
    
    # Handle negative eigenvalues first (if any)
    eigenvals = np.maximum(eigenvals, 0)
    
    # Apply specified adjustment method
    if method == linear_shrinkage
        # Linear shrinkage to the mean
        mean_eigenval = np.mean(eigenvals)
        adjusted_eigenvals = (1 - alpha)  eigenvals + alpha  mean_eigenval
        
    elif method == clipping
        # Clip small eigenvalues to ensure minimum value
        adjusted_eigenvals = np.maximum(eigenvals, min_eigenval)
        
    elif method == nonlinear_shrinkage
        # Simple nonlinear shrinkage (square root shrinkage)
        # Note More sophisticated nonlinear shrinkage would require additional parameters
        mean_eigenval = np.mean(eigenvals)
        adjusted_eigenvals = np.sqrt(eigenvals  mean_eigenval)
        
    else
        raise ValueError(fUnknown method {method})
    
    # Reconstruct the adjusted covariance matrix
    adjusted_cov = eigenvecs @ np.diag(adjusted_eigenvals) @ eigenvecs.T
    
    return adjusted_cov

def sample_simulation_bias(n_assets, n_obs, n_simulations=1000)
    
    Simulate and measure eigenfactor bias in sample covariance estimation.
    
    Parameters
    -----------
    n_assets  int
        Number of assets
    n_obs  int
        Number of observations
    n_simulations  int
        Number of simulation runs
        
    Returns
    --------
    dict
        Statistics about eigenvalue estimation bias
    
    # Create a true covariance matrix (simple factor model)
    true_eigenvals = np.linspace(1, 10, n_assets)  # Linear spacing for demonstration
    random_eigenvecs = linalg.qr(np.random.randn(n_assets, n_assets))[0]
    true_cov = random_eigenvecs @ np.diag(true_eigenvals) @ random_eigenvecs.T
    
    # Storage for results
    largest_eigenval_bias = []
    smallest_eigenval_bias = []
    
    for _ in range(n_simulations)
        # Generate sample data from true covariance
        data = np.random.multivariate_normal(np.zeros(n_assets), true_cov, size=n_obs)
        
        # Compute sample covariance
        sample_cov = np.cov(data, rowvar=False)
        
        # Extract eigenvalues
        sample_eigenvals = linalg.eigvalsh(sample_cov)
        
        # Calculate bias in largest and smallest eigenvalues
        largest_eigenval_bias.append(sample_eigenvals[-1]  true_eigenvals[-1])
        smallest_eigenval_bias.append(sample_eigenvals[0]  true_eigenvals[0])
    
    return {
        largest_eigenvalue {
            mean_bias np.mean(largest_eigenval_bias),
            std_bias np.std(largest_eigenval_bias)
        },
        smallest_eigenvalue {
            mean_bias np.mean(smallest_eigenval_bias),
            std_bias np.std(smallest_eigenval_bias)
        }
    }

def evaluate_adjustment_methods(returns, methods=None, test_size=0.3)
    
    Evaluate different eigen-adjustment methods on portfolio optimization.
    
    Parameters
    -----------
    returns  ndarray
        Asset returns matrix (observations x assets)
    methods  list
        List of adjustment methods to evaluate
    test_size  float
        Proportion of data to use for testing
        
    Returns
    --------
    dict
        Performance metrics for each method
    
    if methods is None
        methods = [unadjusted, linear_shrinkage, clipping, nonlinear_shrinkage]
    
    n_obs = returns.shape[0]
    split = int(n_obs  (1 - test_size))
    
    # Split data
    train_returns = returns[split]
    test_returns = returns[split]
    
    # Calculate sample covariance from training data
    sample_cov = np.cov(train_returns, rowvar=False)
    
    results = {}
    
    for method in methods
        if method == unadjusted
            cov_matrix = sample_cov
        else
            cov_matrix = eigen_adjust_covariance(sample_cov, method=method)
        
        # Simple minimum variance portfolio weights
        inv_cov = linalg.inv(cov_matrix)
        ones = np.ones(cov_matrix.shape[0])
        weights = inv_cov @ ones
        weights = weights  np.sum(weights)
        
        # Evaluate portfolio performance on test set
        portfolio_returns = test_returns @ weights
        realized_vol = np.std(portfolio_returns)  np.sqrt(252)  # Annualized
        predicted_vol = np.sqrt(weights @ cov_matrix @ weights)  np.sqrt(252)
        
        results[method] = {
            realized_volatility realized_vol,
            predicted_volatility predicted_vol,
            volatility_ratio realized_vol  predicted_vol,
            weights weights
        }
    
    return results

# Example usage
if __name__ == __main__
    # Example 1 Simulate eigenfactor bias
    print(Simulating eigenfactor bias...)
    bias_stats = sample_simulation_bias(n_assets=50, n_obs=100, n_simulations=500)
    print(fLargest eigenvalue bias {bias_stats['largest_eigenvalue']['mean_bias'].4f})
    print(fSmallest eigenvalue bias {bias_stats['smallest_eigenvalue']['mean_bias'].4f})
    
    # Example 2 Fix a non-positive definite matrix
    print(nFixing a non-positive definite matrix...)
    # Create a problematic matrix
    bad_matrix = np.array([
        [1.0, 0.9, 0.9],
        [0.9, 1.0, 0.9],
        [0.9, 0.9, 1.0]
    ])
    # Make it non-positive definite by manual adjustment
    bad_matrix[0, 1] = 0.99  # Introduce linear dependency
    bad_matrix[1, 0] = 0.99
    
    # Get eigenvalues before adjustment
    eigenvals_before = linalg.eigvalsh(bad_matrix)
    print(fEigenvalues before adjustment {eigenvals_before})
    
    # Fix the matrix
    fixed_matrix = eigen_adjust_covariance(bad_matrix, method=clipping)
    
    # Get eigenvalues after adjustment
    eigenvals_after = linalg.eigvalsh(fixed_matrix)
    print(fEigenvalues after adjustment {eigenvals_after})
    
    # Example 3 Generate synthetic returns and evaluate methods
    print(nEvaluating adjustment methods on synthetic data...)
    np.random.seed(42)
    n_assets = 20
    n_days = 1000
    
    # Generate synthetic returns with factor structure
    factor_exposures = np.random.randn(n_assets, 3)
    factor_returns = np.random.randn(n_days, 3)  0.01
    specific_returns = np.random.randn(n_days, n_assets)  0.02
    returns = specific_returns + factor_returns @ factor_exposures.T
    
    # Evaluate methods
    evaluation = evaluate_adjustment_methods(returns)
    
    # Print results
    for method, results in evaluation.items()
        print(fn{method.upper()})
        print(f  Realized volatility {results['realized_volatility'].4f})
        print(f  Predicted volatility {results['predicted_volatility'].4f})
        print(f  Volatility ratio (realizedpredicted) {results['volatility_ratio'].4f})